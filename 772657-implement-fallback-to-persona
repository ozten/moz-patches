# HG changeset patch
# Parent 2d96ee8d9dd44ac0e80d79b33828f05cef79cedb
Refactoring IdP

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1180,8 +1180,10 @@ pref("social.manifest.motown", "{\"origi
 // Comma-separated list of nsIURI::prePaths that are allowed to activate
 // built-in social functionality.
 pref("social.activation.whitelist", "https://motown-dev.mozillalabs.com");
 pref("social.sidebar.open", true);
 pref("social.active", false);
 pref("social.toast-notifications.enabled", true);
 
 pref("dom.identity.enabled", false);
+// Base URL for the Persona Fallback Service
+pref("dom.identity.persona_fallback", "https://desktoppersona.personatest.org");
diff --git a/toolkit/identity/Identity.jsm b/toolkit/identity/Identity.jsm
--- a/toolkit/identity/Identity.jsm
+++ b/toolkit/identity/Identity.jsm
@@ -3,16 +3,18 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const EXPORTED_SYMBOLS = ["IdentityService"];
 
+const PERSONA_FALLBACK = "dom.identity.persona_fallback";
+
 const Cu = Components.utils;
 const Ci = Components.interfaces;
 const Cc = Components.classes;
 const Cr = Components.results;
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/identity/LogUtils.jsm");
@@ -244,20 +246,23 @@ IDService.prototype = {
    *        (string) (optional) Protocol to use.  Default is https.
    *                 This is necessary because we are unable to test
    *                 https.
    *
    * @param aCallback
    *
    */
   _fetchWellKnownFile: function _fetchWellKnownFile(aDomain, aCallback, aScheme='https') {
-    // XXX bug 769854 make tests https and remove aScheme option
-    let url = aScheme + '://' + aDomain + "/.well-known/browserid";
-    log("_fetchWellKnownFile:", url);
-
+    if (Services.prefs.getPrefType(PERSONA_FALLBACK) != Ci.nsIPrefBranch.PREF_STRING) {
+      return aCallback("Error: Bad persona fallback preference");
+    }
+    let personaBaseUrl = Services.prefs.getCharPref(PERSONA_FALLBACK);
+    log(personaBaseUrl);
+    let url = personaBaseUrl + '/wsapi/discovery?domain=' + aDomain;
+    log(url);
     // this appears to be a more successful way to get at xmlhttprequest (which supposedly will close with a window
     let req = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"]
                 .createInstance(Ci.nsIXMLHttpRequest);
 
     // XXX bug 769865 gracefully handle being off-line
     // XXX bug 769866 decide on how to handle redirects
     req.open("GET", url, true);
     req.responseType = "json";
@@ -267,23 +272,21 @@ IDService.prototype = {
         log("_fetchWellKnownFile", url, ": server returned status:", req.status);
         return aCallback("Error");
       }
       try {
         let idpParams = req.response;
 
         // Verify that the IdP returned a valid configuration
         if (! (idpParams.provisioning &&
-            idpParams.authentication &&
-            idpParams['public-key'])) {
+            idpParams.authentication)) {
           let errStr= "Invalid well-known file from: " + aDomain;
           log("_fetchWellKnownFile:", errStr);
           return aCallback(errStr);
         }
-
         let callbackObj = {
           domain: aDomain,
           idpParams: idpParams,
         };
         log("_fetchWellKnownFile result: ", callbackObj);
         // Yay.  Valid IdP configuration for the domain.
         return aCallback(null, callbackObj);
 
