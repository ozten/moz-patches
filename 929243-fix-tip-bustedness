# HG changeset patch
# User Matthew Noorenberghe <mozilla@noorenberghe.ca>
# Date 1375242602 25200
#      Tue Jul 30 20:50:02 2013 -0700
# Node ID 837db860ff78d754fd4bb3ab4deeaa52c414a20b
# Parent 8803e8c0ee3efe4c0c07be612ce51c1d274b7c96
imported patch desktop_identity

diff --git a/browser/modules/SignInToWebsite.jsm b/browser/modules/SignInToWebsite.jsm
--- a/browser/modules/SignInToWebsite.jsm
+++ b/browser/modules/SignInToWebsite.jsm
@@ -21,17 +21,16 @@ XPCOMUtils.defineLazyModuleGetter(this, 
 
 function log(...aMessageArgs) {
   Logger.log.apply(Logger, ["SignInToWebsiteUX"].concat(aMessageArgs));
 }
 
 this.SignInToWebsiteUX = {
 
   init: function SignInToWebsiteUX_init() {
-
     Services.obs.addObserver(this, "identity-request", false);
     Services.obs.addObserver(this, "identity-auth", false);
     Services.obs.addObserver(this, "identity-auth-complete", false);
     Services.obs.addObserver(this, "identity-login-state-changed", false);
   },
 
   uninit: function SignInToWebsiteUX_uninit() {
     Services.obs.removeObserver(this, "identity-request");
diff --git a/browser/modules/test/Makefile.in b/browser/modules/test/Makefile.in
--- a/browser/modules/test/Makefile.in
+++ b/browser/modules/test/Makefile.in
@@ -1,9 +1,10 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 ifeq ($(MOZ_WIDGET_TOOLKIT),windows)
 MOCHITEST_BROWSER_FILES += \
   browser_taskbar_preview.js \
+  browser_SignInToWebsite.js \
   $(NULL)
 endif
diff --git a/dom/identity/DOMIdentity.jsm b/dom/identity/DOMIdentity.jsm
--- a/dom/identity/DOMIdentity.jsm
+++ b/dom/identity/DOMIdentity.jsm
@@ -11,17 +11,17 @@ this.EXPORTED_SYMBOLS = ["DOMIdentity"];
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "objectCopy",
                                   "resource://gre/modules/identity/IdentityUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "IdentityService",
-#ifdef MOZ_B2G_VERSION
+#ifdef MOZ_B2G
                                   "resource://gre/modules/identity/MinimalIdentity.jsm");
 #else
                                   "resource://gre/modules/identity/Identity.jsm");
 #endif
 
 XPCOMUtils.defineLazyModuleGetter(this,
                                   "Logger",
                                   "resource://gre/modules/identity/LogUtils.jsm");
diff --git a/dom/identity/moz.build b/dom/identity/moz.build
--- a/dom/identity/moz.build
+++ b/dom/identity/moz.build
@@ -3,16 +3,19 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 TEST_DIRS += ['tests']
 
 EXTRA_COMPONENTS += [
     'Identity.manifest',
+    'nsIDService.js',
+]
+
+EXTRA_PP_COMPONENTS += [
     'nsDOMIdentity.js',
-    'nsIDService.js',
 ]
 
 EXTRA_PP_JS_MODULES += [
     'DOMIdentity.jsm',
 ]
 
diff --git a/dom/identity/nsDOMIdentity.js b/dom/identity/nsDOMIdentity.js
--- a/dom/identity/nsDOMIdentity.js
+++ b/dom/identity/nsDOMIdentity.js
@@ -341,26 +341,31 @@ nsDOMIdentity.prototype = {
     }
 
     this._beginAuthenticationCallback = aCallback;
     this._identityInternal._mm.sendAsyncMessage("Identity:IDP:BeginAuthentication",
                                                 this.DOMIdentityMessage());
   },
 
   completeAuthentication: function nsDOMIdentity_completeAuthentication() {
-    if (this._authenticationEnded) {
-      throw new Error("Authentication already ended");
+
+    try {
+      if (this._authenticationEnded) {
+        throw new Error("Authentication already ended");
+      }
+      if (!this._beginAuthenticationCallback) {
+        throw new Error("navigator.id.completeAuthentication called outside of authentication");
+      }
+      this._authenticationEnded = true;
+
+      this._identityInternal._mm.sendAsyncMessage("Identity:IDP:CompleteAuthentication",
+                                                  this.DOMIdentityMessage());
+    } catch (ex) {
+      dump(ex + "\n");
     }
-    if (!this._beginAuthenticationCallback) {
-      throw new Error("navigator.id.completeAuthentication called outside of authentication");
-    }
-    this._authenticationEnded = true;
-
-    this._identityInternal._mm.sendAsyncMessage("Identity:IDP:CompleteAuthentication",
-                                                this.DOMIdentityMessage());
   },
 
   raiseAuthenticationFailure: function nsDOMIdentity_raiseAuthenticationFailure(aReason) {
     if (this._authenticationEnded) {
       throw new Error("Authentication already ended");
     }
     if (!aReason || typeof(aReason) != "string") {
       throw new Error("raiseProvisioningFailure reason is required");
@@ -599,34 +604,39 @@ nsDOMIdentityInternal.prototype = {
         || !Services.prefs.getBoolPref(PREF_ENABLED)) {
       return null;
     }
 
     this._debug =
       Services.prefs.getPrefType(PREF_DEBUG) == Ci.nsIPrefBranch.PREF_BOOL
       && Services.prefs.getBoolPref(PREF_DEBUG);
 
+    this._log("init was called from " + aWindow.document.location);
+
     let util = aWindow.QueryInterface(Ci.nsIInterfaceRequestor)
                       .getInterface(Ci.nsIDOMWindowUtils);
 
+#ifdef MOZ_B2G
     // To avoid cross-process windowId collisions, use a uuid as an
     // almost certainly unique identifier.
     //
     // XXX Bug 869182 - use a combination of child process id and
     // innerwindow id to construct the unique id.
     this._id = uuidgen.generateUUID().toString();
     this._innerWindowID = util.currentInnerWindowID;
+#else
+    this._id = util.outerWindowID;
+#endif
 
     // nsDOMIdentity needs to know our _id, so this goes after
     // its creation.
+try {
     this._identity = new nsDOMIdentity(this);
     this._identity._init(aWindow);
 
-    this._log("init was called from " + aWindow.document.location);
-
     this._mm = cpmm;
 
     // Setup listeners for messages from parent process.
     this._messages = [
       "Identity:ResetState",
       "Identity:RP:Watch:OnLogin",
       "Identity:RP:Watch:OnLogout",
       "Identity:RP:Watch:OnReady",
@@ -636,17 +646,19 @@ nsDOMIdentityInternal.prototype = {
       "Identity:IDP:CallBeginAuthenticationCallback"
     ];
     this._messages.forEach(function(msgName) {
       this._mm.addMessageListener(msgName, this);
     }, this);
 
     // Setup observers so we can remove message listeners.
     Services.obs.addObserver(this, "inner-window-destroyed", false);
-
+} catch (ex) {
+  dump(ex + "\n");
+}
     return this._identity;
   },
 
   // Private.
   _log: function nsDOMIdentityInternal__log(msg) {
     if (!this._debug) {
       return;
     }
diff --git a/toolkit/identity/Identity.jsm b/toolkit/identity/Identity.jsm
--- a/toolkit/identity/Identity.jsm
+++ b/toolkit/identity/Identity.jsm
@@ -287,17 +287,17 @@ IDService.prototype = {
         // Yay.  Valid IdP configuration for the domain.
         return aCallback(null, callbackObj);
 
       } catch (err) {
         reportError("_fetchWellKnownFile", "Bad configuration from", aDomain, err);
         return aCallback(err.toString());
       }
     };
-    req.onerror = function _fetchWellKnownFile_onerror() {
+    req.onerror = function _fetchWellKnownFile_onerror(err) {
       log("_fetchWellKnownFile", "ERROR:", req.status, req.statusText);
       log("ERROR: _fetchWellKnownFile:", err);
       return aCallback("Error");
     };
     req.send(null);
   },
 
 };
diff --git a/toolkit/identity/IdentityProvider.jsm b/toolkit/identity/IdentityProvider.jsm
--- a/toolkit/identity/IdentityProvider.jsm
+++ b/toolkit/identity/IdentityProvider.jsm
@@ -37,17 +37,16 @@ function IdentityProviderService() {
                                     "resource://gre/modules/identity/IdentityStore.jsm",
                                     "IdentityStore");
 
   this.reset();
 }
 
 IdentityProviderService.prototype = {
   QueryInterface: XPCOMUtils.generateQI([Ci.nsISupports, Ci.nsIObserver]),
-  _sandboxConfigured: false,
 
   observe: function observe(aSubject, aTopic, aData) {
     switch (aTopic) {
       case "quit-application-granted":
         Services.obs.removeObserver(this, "quit-application-granted");
         this.shutdown();
         break;
     }
@@ -80,22 +79,16 @@ IdentityProviderService.prototype = {
     if (typeof aErrBack === 'function') {
       aErrBack(err);
     }
   },
 
   shutdown: function RP_shutdown() {
     this.reset();
 
-    if (this._sandboxConfigured) {
-      // Tear down message manager listening on the hidden window
-      Cu.import("resource://gre/modules/DOMIdentity.jsm");
-      DOMIdentity._configureMessages(Services.appShell.hiddenDOMWindow, false);
-      this._sandboxConfigured = false;
-    }
 
     Services.obs.removeObserver(this, "quit-application-granted");
   },
 
   get securityLevel() {
     return 1;
   },
 
@@ -126,17 +119,17 @@ IdentityProviderService.prototype = {
 
     // If aProvId is not null, then we already have a flow
     // with a sandbox.  Otherwise, get a sandbox and create a
     // new provision flow.
 
     if (aProvId) {
       // Re-use an existing sandbox
       log("_provisionIdentity: re-using sandbox in provisioning flow with id:", aProvId);
-      this._provisionFlows[aProvId].provisioningSandbox.reload();
+      this._provisionFlows[aProvId].provisioningSandbox.reload(aCallback);
 
     } else {
       this._createProvisioningSandbox(url, function createdSandbox(aSandbox) {
         // create a provisioning flow, using the sandbox id, and
         // stash callback associated with this provisioning workflow.
 
         let provId = aSandbox.id;
         this._provisionFlows[provId] = {
@@ -437,23 +430,16 @@ IdentityProviderService.prototype = {
 
   /**
    * Load the provisioning URL in a hidden frame to start the provisioning
    * process.
    */
   _createProvisioningSandbox: function _createProvisioningSandbox(aURL, aCallback) {
     log("_createProvisioningSandbox:", aURL);
 
-    if (!this._sandboxConfigured) {
-      // Configure message manager listening on the hidden window
-      Cu.import("resource://gre/modules/DOMIdentity.jsm");
-      DOMIdentity._configureMessages(Services.appShell.hiddenDOMWindow, true);
-      this._sandboxConfigured = true;
-    }
-
     new Sandbox(aURL, aCallback);
   },
 
   /**
    * Load the authentication UI to start the authentication process.
    */
   _beginAuthenticationFlow: function _beginAuthenticationFlow(aProvId, aURL) {
     log("_beginAuthenticationFlow:", aProvId, aURL);
